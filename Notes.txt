// NETWORKING! :)

ip add
ip route
bridge link

// PRE-INSTALL

sudo apt-get install nano && sudo apt-get install git

// APACHE WEBSERVER INSTALLATION

# Packages installation
sudo apt-get update
sudo apt-get install apache2 # default web root should be /var/www/ on debian-based distros

# Apache service/daemon start
sudo systemctl status apache2
sudo systemctl start apache2
sudo systemctl enable apache2 # To enable Apache so it can start the daemon when booting

sudo apache2ctl configtest # Reviews the Apache config files and looks for syntax errors
sudo systemctl reload apache2 # Reload Apache config files

sudo service apache2 restart
sudo service --status-all # (If you want to list all available services)

hostname -I # Check's for your local network's interface IP address
curl -4 icanhazip.com # To know your server's public IP address

// GIT USER ACCOUNT PREPARATION

sudo adduser --disabled-password git

// SSH SERVER PREPARATION

sudo apt-get install openssh-server

sudo nano /etc/ssh/sshd_config # Append "AllowGroups ubuntu git" - OPTIONAL: by default all groups are allowed to try SSHing

sudo mkdir /home/git/.ssh && sudo chmod 700 /home/git/.ssh && sudo touch /home/git/.ssh/authorized_keys && sudo chmod 600 /home/git/.ssh/authorized_keys # After this you need to generate the SSH RSA keys private/public for the user you would like to access the repo

ssh-keygen # On the CLIENT who will access the repo, this will generate the private and public (.pub) keys - the keys will be stored by default on the .ssh/ folder on the user home dir

sudo cat "id_rsa.pub" >> /home/git/.ssh/authorized_keys # Or you can copy paste it from Windows to the Linux box

sudo sshd -T | grep Allow # To check the sshd daemon config and look for specific parameters

// GIT REPOSITORY AND SERVER SETUP

mkdir /home/git/projects.git # Create the dir that will store the repo. It should belong to the "git" user/group.
(chown git:git /path_to_the_created_repo)
cd /home/git/projects.git && git init --bare # This will initialize the repo, including the default/sample "hooks" that we will use later on.

nano /home/git/projects.git/hooks/post-receive # Add the lines below, replacing the path if needed according to the webserver root - this will publish any successfully pushed files into the webserver site path
#! /bin/sh
GIT_WORK_TREE=/var/www/html/projects git checkout -qf
chmod 755 /home/git/projects.git/hooks/post-receive # File should be executable and owned by git:git

// GIT REPOSITORY AND CLIENT SETUP

git clone git@gitserver:/path_to_git_repo.git_on_gitserver/ # Client user must be authorized over SSH (SSH RSA key included on the server)

git commit -am 'New commit' # These commands will push the committed changes to the repo
git push origin master

// MONGO DB SETUP

sudo apt-key add /usr/share/keyrings/mongodb-server-7.0.gpg -- Required to add the public gpg key to the system database
sudo npm install -g mongodb -- To install the npm mongodb package globally


// DOCKER

docker run -it --rm busybox

docker run -itd --rm --name example_container image_tag_name (e.g. busybox)

docker run -itd --rm -p 80:80 --name example_container image_tag_name // Expose port 80 on host and container

docker run -itd --rm -p 80:80 --network network_name --name example_container image_tag_name // Add container to network

docker inspect example_container
docker inspect network_name

docker exec -it container_name sh # Opens a pseudo-TTY terminal - sh shell

docker network create network_name

docker ps
docker network ls